1. install docker
apt update
apt install docker.io

//steps below could be ignored if you dont want to connect docker server from other client

//remove authorization-plugin related config /usr/lib/systemd/system/docker.service if you dont want to use it

//add listening port on IP and change deault storage to big partion
/lib/systemd/system/docker.service
change ExecStart
ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:10100 -g /local/docker

systemctl daemon-reload
systemctl enable docker
systemctl start docker
//check log with journalctl -xe

//turn off swat, required by k8s
swapoff -a

2. install k8s master node/control plane
2.1 download k8s related image
apt-get install -y apt-transport-https ca-certificates curl
curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
apt-get update
apt-get install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl

2.2 create cluster
#note, make sure the port is in firewall opened range
kubeadm init --apiserver-advertise-address=10.86.73.84 --apiserver-bind-port=10099 --pod-network-cidr=192.168.0.0/16

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.86.73.84:10099 --token bomkd7.s362u0pyyr2w23sd --discovery-token-ca-cert-hash sha256:c86e9f05eecd4774cf7b2aa44bf894195942a0b12a7181c7f5dcf64b95fd6865

2.3 remove the taint for control node, so that you can deploy pod on that node
kubectl taint nodes --all node-role.kubernetes.io/control-plane-

3. deploy network plugin
//follow link below
https://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart

kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/tigera-operator.yaml
kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/custom-resources.yaml

4. install working node
4.1 repeate step #2.1
4.2 join cluster by the link printed when install master node
//on working node, reproduce
 kubeadm join 10.86.73.84:10099 --token ier7ib.542mafvs1ms8vkt3 \
        --discovery-token-ca-cert-hash sha256:218aa14a8edaec641d23a769859bdf7ad494bc2d363d44c813e0b56580b4e1c1

5. install docker registry/image repo


5.1 start docker registry with user name, password and private cert

https://serverfault.com/questions/224122/what-is-crt-and-key-files-and-how-to-generate-them
5.1.1 create a private certificate
openssl genrsa 2048 > domain.key
chmod 400 domain.key
openssl req -new -x509 -nodes -sha256 -days 365 -key domain.key -out domain.crt

https://docs.docker.com/registry/deploying/

5.1.2 create user name and password
docker run --entrypoint htpasswd  httpd:2 -Bbn dockerUserName dockerUserName > auth/htpasswd
-d -p 10098:5000 -v /local/image_repo:/tmp/registry --restart=always .name=img_repo registry:2.6.1

5.1.3 copy password and cert file to following structure
tree rootfs

rootfs
`-- certs
    |-- domain.crt
    |-- domain.key
    |-- htpasswd
    `-- readme.txt
   
5.1.4 build my private registry image
cat Dockerfile

FROM registry:2.6.1
COPY rootfs /

CMD /entrypoint.sh /etc/docker/registry/config.yml

docker build -t myregistry:1.0 .


5.1.5 start registry service on registryHost

docker run -d \
  -p 10098:443 \
  --restart=always \
  -v /local/image_repo:/tmp/registry \
  --name=img_repo  \
  -e "REGISTRY_AUTH=htpasswd" \
  -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" \
  -e REGISTRY_AUTH_HTPASSWD_PATH=/certs/htpasswd \
  -e REGISTRY_HTTP_ADDR=0.0.0.0:443 \
  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
  myregistry:1.0

5.1.6 login from docker client
docker login registryHost:10098
Username: dockerUserName
Password: dockerPassword
Login Succeeded

5.1.7 tag docker image and push to registry 
docker tag nginx:last registryHost:10098/nginx:1.0
docker push  registryHost:10098/nginx:1.0

5.1.8 query image and tags from registry
curl -u dockerUserName:dockerPassword --insecure -X GET https://registryHost:10098/v2/_catalog
curl -u dockerUserName:dockerPassword --insecure -X GET https://registryHost:10098/v2/nginx/tags/list
docker push registryHost:10098/registry

5.2
5.2.1 create secret for k8s namespace
kubectl create secret generic test --from-file=.dockerconfigjson=/home/eguoyzh/.docker/config.json --type=kubernetes.io/dockerconfigjson

kubectl get secret/test --output=yaml
apiVersion: v1
data:
  .dockerconfigjson: ewoJImF1dGhzIjogewoJCSJzZXJvaXVzMDAyMDI6MTAwOTgiOiB7CgkJCSJhdXRoIjogIlpYSnBZM056YjI0NlpYSnBZM056YjI0PSIKCQl9Cgl9Cn0K
kind: Secret
metadata:
  creationTimestamp: "2022-10-10T16:00:38Z"
  name: test
  namespace: guoyou
  resourceVersion: "3833387"
  uid: ddb98179-64d5-40c8-9af5-80d0397f189c
type: kubernetes.io/dockerconfigjson

you can apply this secret to other namesapce as well

5.2.2 configure k8s/containerd to trust private docker registry
apply follow steps to each k8s node

sudo cp domain.crt to /usr/local/share/ca-certificates/
sudo update-ca-certificates && systemctl restart containerd   ##k8s use containerd

5.2.3 pull image from private registry in k8s

apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  imagePullSecrets:
  - name: test
  containers:
  - name: nginx
    image: registryHost:10098/nginx:latest
    ports:
    - containerPort: 80
    volumeMounts:
    - name: varlog
      mountPath: /var/log/nginx
  - name: sidecar
    image: registryHost:10098/busybox:latest
    volumeMounts:
    - name: varlog
      mountPath: /var/log/nginx
    args: [/bin/sh, -c, 'sleep 3600']
  volumes:
  - name: varlog
    emptyDir: {}

